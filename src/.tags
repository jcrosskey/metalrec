!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Cvec0	tmp.py	/^Cvec0 = metalrec_lib.get_compatible_reads(ref0, read_array)$/;"	v
Cvec1	tmp.py	/^Cvec1 = metalrec_lib.get_compatible_reads(ref1, read_array)$/;"	v
Cvec2	tmp.py	/^Cvec2 = metalrec_lib.get_compatible_reads(ref2, read_array)$/;"	v
GAP_SCORE	params.py	/^GAP_SCORE = -0.9$/;"	v
MATCH_SCORE	params.py	/^MATCH_SCORE = 0$/;"	v
MISMATCH_SCORE	params.py	/^MISMATCH_SCORE = -1.0$/;"	v
SamRead	samread.py	/^class SamRead:$/;"	c
__init__	samread.py	/^    def __init__(self, alignRecord):$/;"	m	class:SamRead
a	tmp.py	/^        a = key$/;"	v
a	tmp.py	/^    a = samIn.readline()$/;"	v
a	tmp.py	/^a = a.split(':') # separate the non-insertion and insertion positions$/;"	v
a	tmp.py	/^a = pairwise2.align.globalms(rseq, qseq, 0, -1, -0.9,-0.9, penalize_end_gaps=[True, False])$/;"	v
a	tmp.py	/^a = read_info.keys()[1]$/;"	v
aa	tmp.py	/^aa = array_a.reshape(-1,5)$/;"	v
add_help	align_tmp.py	/^                                 add_help=True, # include help in the options$/;"	v
add_help	check_PBReads.py	/^                                 add_help=True, # include help in the options$/;"	v
add_help	clean_sam.py	/^                                 add_help=True, # include help in the options$/;"	v
add_help	find_good_regions.py	/^                                 add_help=True, # include help in the options$/;"	v
add_help	get_bbmap_time.py	/^                                 add_help=True, # include help in the options$/;"	v
add_help	metalrec.py	/^                                 add_help=True, # include help in the options$/;"	v
add_help	test.py	/^                                 add_help=True, # include help in the options$/;"	v
adjac	tmp.py	/^adjac = gaps[1:] - gaps[:-1] # difference between a position in the gap vec and the previous position, if the difference is 1, then it's consecutive gap$/;"	v
alignment	metalrec_lib.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
alignment	samread.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
alphabet	metalrec_lib.py	/^alphabet = 'ACGTD'$/;"	v
are_reads_compatible	metalrec_lib.py	/^def are_reads_compatible(read_array1d1, read_array1d2):$/;"	f
argparse	align_tmp.py	/^import argparse$/;"	i
argparse	check_PBReads.py	/^import argparse$/;"	i
argparse	clean_sam.py	/^import argparse$/;"	i
argparse	find_good_regions.py	/^import argparse$/;"	i
argparse	get_bbmap_time.py	/^import argparse$/;"	i
argparse	metalrec.py	/^import argparse$/;"	i
argparse	test.py	/^import argparse$/;"	i
array_a	tmp.py	/^array_a = metalrec_lib.make_read_array1d(a, bp_pos_dict, ins_pos_dict, type_array,poly_bps, poly_ins, consensus_bps, consensus_ins)$/;"	v
array_b	tmp.py	/^array_b = metalrec_lib.make_read_array1d(read_info.keys()[0], bp_pos_dict, ins_pos_dict, type_array,poly_bps, poly_ins, consensus_bps, consensus_ins)$/;"	v
array_to_seq	metalrec_lib.py	/^def array_to_seq(seq_array):$/;"	f
cigar	metalrec_lib.py	/^def cigar(cigar_string):$/;"	f
clean_samfile	metalrec_lib.py	/^def clean_samfile(samFile,samNew, rseq, maxSub=3, maxIns=3, maxDel=3,maxSubRate=0.02, maxInsRate=0.2, maxDelRate=0.2):$/;"	f
compatible_mat	metalrec_lib.py	/^def compatible_mat(read_array):$/;"	f
compress_homopolymer	unused.py	/^def compress_homopolymer(string):$/;"	f
conflict_handler	align_tmp.py	/^                                 conflict_handler='resolve', # for handling conflict options$/;"	v
conflict_handler	check_PBReads.py	/^                                 conflict_handler='resolve', # for handling conflict options$/;"	v
conflict_handler	clean_sam.py	/^                                 conflict_handler='resolve', # for handling conflict options$/;"	v
conflict_handler	find_good_regions.py	/^                                 conflict_handler='resolve', # for handling conflict options$/;"	v
conflict_handler	get_bbmap_time.py	/^                                 conflict_handler='resolve', # for handling conflict options$/;"	v
conflict_handler	metalrec.py	/^                                 conflict_handler='resolve', # for handling conflict options$/;"	v
conflict_handler	test.py	/^                                 conflict_handler='resolve', # for handling conflict options$/;"	v
cov_bps	metalrec_lib.py	/^def cov_bps(read_array1d):$/;"	f
dict_to_string	metalrec_lib.py	/^def dict_to_string(dictionary):$/;"	f
diff_chars	unused.py	/^diff_chars = alphabet.replace(leftmost_char,"")$/;"	v
dynamic	metalrec_lib.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
dynamic	samread.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
fill_gap	metalrec_lib.py	/^def fill_gap(read_array, outFastaFile=None, outDir=None, readinfo=None, verbose=False):$/;"	f
firstX_rSeq	unused.py	/^firstX_rSeq = firstX_rSeq  - left_one$/;"	v
format_alignment	metalrec_lib.py	/^from Bio.pairwise2 import format_alignment$/;"	i
format_alignment	samread.py	/^from Bio.pairwise2 import format_alignment$/;"	i
format_alignment	tmp.py	/^from Bio.pairwise2 import format_alignment$/;"	i
formatter_class	align_tmp.py	/^                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter # print default values for options in help message$/;"	v
formatter_class	check_PBReads.py	/^                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter # print default values for options in help message$/;"	v
formatter_class	clean_sam.py	/^                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter # print default values for options in help message$/;"	v
formatter_class	find_good_regions.py	/^                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter # print default values for options in help message$/;"	v
formatter_class	get_bbmap_time.py	/^                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter # print default values for options in help message$/;"	v
formatter_class	metalrec.py	/^                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter # print default values for options in help message$/;"	v
formatter_class	test.py	/^                                 formatter_class=argparse.ArgumentDefaultsHelpFormatter # print default values for options in help message$/;"	v
fromfile_prefix_chars	align_tmp.py	/^                                 fromfile_prefix_chars='@', # if options are read from file, '@args.txt'$/;"	v
fromfile_prefix_chars	check_PBReads.py	/^                                 fromfile_prefix_chars='@', # if options are read from file, '@args.txt'$/;"	v
fromfile_prefix_chars	clean_sam.py	/^                                 fromfile_prefix_chars='@', # if options are read from file, '@args.txt'$/;"	v
fromfile_prefix_chars	find_good_regions.py	/^                                 fromfile_prefix_chars='@', # if options are read from file, '@args.txt'$/;"	v
fromfile_prefix_chars	get_bbmap_time.py	/^                                 fromfile_prefix_chars='@', # if options are read from file, '@args.txt'$/;"	v
fromfile_prefix_chars	metalrec.py	/^                                 fromfile_prefix_chars='@', # if options are read from file, '@args.txt'$/;"	v
fromfile_prefix_chars	test.py	/^                                 fromfile_prefix_chars='@', # if options are read from file, '@args.txt'$/;"	v
gap_lens	tmp.py	/^gap_lens = concatenate( (gap_lens, array([len(gaps) - gap_starts[-1] - 1]) )) # append the length of the last gap$/;"	v
gap_lens	tmp.py	/^gap_lens = gap_starts -  concatenate(( array([0]), gap_starts[:-1] )) # length of the gaps ( not including the last gap)$/;"	v
gap_pos	metalrec_lib.py	/^def gap_pos(ref_array, read_array, compatible_ind):$/;"	f
gap_pos0	tmp.py	/^gap_pos0 = metalrec_lib.gap_pos(ref0, read_array, Cvec0)$/;"	v
gap_pos1	tmp.py	/^gap_pos1 = metalrec_lib.gap_pos(ref1, read_array, Cvec1)$/;"	v
gap_pos2	tmp.py	/^gap_pos2 = metalrec_lib.gap_pos(ref2, read_array, Cvec2)$/;"	v
gap_starts	tmp.py	/^gap_starts = where(adjac != 1)[0] # positions where new gap starts$/;"	v
generate_sam_record	samread.py	/^    def generate_sam_record(self, maxSub=3, maxIns=3, maxDel=3,maxSubRate=0.02, maxInsRate=0.2, maxDelRate=0.2):$/;"	m	class:SamRead
get_bases	metalrec_lib.py	/^def get_bases(cigar_string, qseq='', start_pos=''):$/;"	f
get_bases	samread.py	/^    def get_bases(self):$/;"	m	class:SamRead
get_bases_from_align	metalrec_lib.py	/^def get_bases_from_align(align, start_pos):$/;"	f
get_cigar	metalrec_lib.py	/^def get_cigar(seqA, seqB):$/;"	f
get_cigar_info	samread.py	/^    def get_cigar_info(self):$/;"	m	class:SamRead
get_compatible_reads	metalrec_lib.py	/^def get_compatible_reads(ref_array, read_array):$/;"	f
get_consensus	unused.py	/^def get_consensus(samFile, ref_fasta, maxSub=3, maxIns=3, maxDel=3, maxErrRate=0.20):$/;"	f
get_consensus_from_array	metalrec_lib.py	/^def get_consensus_from_array(read_array):$/;"	f
get_gaps	metalrec_lib.py	/^def get_gaps(gaps):$/;"	f
get_good_regions	metalrec_lib.py	/^def get_good_regions(ref_bps, rSeq, minGoodLen=1000, minCV=1):$/;"	f
get_new_ref	metalrec_lib.py	/^def get_new_ref(ref_array, read_ind, read_array):$/;"	f
get_poly_pos	metalrec_lib.py	/^def get_poly_pos(ref_bps, ref_ins_dict, region=None, minReads=3, minPercent=0.3):$/;"	f
get_read_seq	samread.py	/^    def get_read_seq(self):$/;"	m	class:SamRead
get_reads_for_gap	metalrec_lib.py	/^def get_reads_for_gap(read_array, gap, skip_reads=[]):$/;"	f
get_reads_name	metalrec_lib.py	/^def get_reads_name(readinfo, compatible_ind):$/;"	f
get_rend	samread.py	/^    def get_rend(self):$/;"	m	class:SamRead
get_tags	samread.py	/^    def get_tags(self):$/;"	m	class:SamRead
get_time	get_bbmap_time.py	/^def get_time(inputfile):$/;"	f
glob	align_tmp.py	/^import glob$/;"	i
glob	find_good_regions.py	/^import glob$/;"	i
glob	get_bbmap_time.py	/^import glob$/;"	i
good_regions	tmp.py	/^good_regions = metalrec_lib.get_good_regions(ref_bps, rseq, minGoodLen=1, minCV=3)$/;"	v
good_regions	tmp.py	/^good_regions = metalrec_lib.get_good_regions(ref_bps, rseq, minPacBioLen=1000, minCV=1)$/;"	v
greedy_fill_gap	metalrec_lib.py	/^def greedy_fill_gap(read_array, ref0=None, verbose=False):$/;"	f
is_compatible	metalrec_lib.py	/^def is_compatible(array1, array2):$/;"	f
is_duplicate	samread.py	/^    def is_duplicate(self):$/;"	m	class:SamRead
is_paired	samread.py	/^    def is_paired(self):$/;"	m	class:SamRead
is_proper_pair	samread.py	/^    def is_proper_pair(self):$/;"	m	class:SamRead
is_qcfail	samread.py	/^    def is_qcfail(self):$/;"	m	class:SamRead
is_read1	samread.py	/^    def is_read1(self):$/;"	m	class:SamRead
is_read2	samread.py	/^    def is_read2(self):$/;"	m	class:SamRead
is_read_compatible	metalrec_lib.py	/^def is_read_compatible(ref_array, read_array1d):$/;"	f
is_record_bad	metalrec_lib.py	/^def is_record_bad(alignRecord,maxSub=3, maxIns=3, maxDel=3,maxSubRate=0.02, maxInsRate=0.2, maxDelRate=0.2):$/;"	f
is_record_bad	samread.py	/^    def is_record_bad(self, maxSub=3, maxIns=3, maxDel=3,maxSubRate=0.02, maxInsRate=0.2, maxDelRate=0.2):$/;"	m	class:SamRead
is_reverse	samread.py	/^    def is_reverse(self):$/;"	m	class:SamRead
is_secondary	samread.py	/^    def is_secondary(self):$/;"	m	class:SamRead
is_supplementary	samread.py	/^    def is_supplementary(self):$/;"	m	class:SamRead
is_unmapped	samread.py	/^    def is_unmapped(self):$/;"	m	class:SamRead
left_one	unused.py	/^left_one = max([rSeq.rfind(x,0,rstart-1) for x in diff_chars]) # position of the first different character to the left$/;"	v
leftmost_char	unused.py	/^leftmost_char = rSeq[rstart - 1] # leftmost character of the aligned region on the reference sequence$/;"	v
locate_in_compress	unused.py	/^def locate_in_compress(string, pos):$/;"	f
main	align_tmp.py	/^def main(argv=None):$/;"	f
main	check_PBReads.py	/^def main(argv=None):$/;"	f
main	clean_sam.py	/^def main(argv=None):$/;"	f
main	find_good_regions.py	/^def main(argv=None):$/;"	f
main	get_bbmap_time.py	/^def main(argv=None):$/;"	f
main	metalrec.py	/^def main(argv=None):$/;"	f
main	test.py	/^def main(argv=None):$/;"	f
make_read_array	metalrec_lib.py	/^def make_read_array(readinfo, bp_pos_dict, ins_pos_dict, type_array,  poly_bps_ext, poly_ins_ext, consensus_bps_ext, consensus_ins_ext, ext_region=None):$/;"	f
make_read_array1d	metalrec_lib.py	/^def make_read_array1d(read_string, bp_pos_dict, ins_pos_dict, type_array, poly_bps_ext, poly_ins_ext, consensus_bps_ext, consensus_ins_ext, ext_region=None):$/;"	f
make_ref_array	metalrec_lib.py	/^def make_ref_array(consensus_bps_ext, consensus_ins_ext, type_array,ext_region):$/;"	f
make_type_array	metalrec_lib.py	/^def make_type_array(poly_bps_ext, poly_ins_ext, consensus_bps_ext, consensus_ins_ext,verbose=False):$/;"	f
massage_mapping	unused.py	/^def massage_mapping(rSeq, qSeq, rstart, rend, cigar_string):$/;"	f
mate_is_reverse	samread.py	/^    def mate_is_reverse(self):$/;"	m	class:SamRead
mate_is_unmapped	samread.py	/^    def mate_is_unmapped(self):$/;"	m	class:SamRead
maxDel	tmp.py	/^maxDel=3$/;"	v
maxDelRate	tmp.py	/^maxDelRate=0.2$/;"	v
maxIns	tmp.py	/^maxIns=3$/;"	v
maxInsRate	tmp.py	/^maxInsRate=0.2 $/;"	v
maxSub	tmp.py	/^maxSub=3$/;"	v
maxSubRate	tmp.py	/^maxSubRate=0.02$/;"	v
max_gap_ind	tmp.py	/^max_gap_ind = argmax(gap_lens) # index of the widest gap$/;"	v
md	metalrec_lib.py	/^def md(MD_tag):$/;"	f
metalrec_lib	align_tmp.py	/^import metalrec_lib$/;"	i
metalrec_lib	check_PBReads.py	/^import metalrec_lib$/;"	i
metalrec_lib	clean_sam.py	/^import metalrec_lib$/;"	i
metalrec_lib	find_good_regions.py	/^import metalrec_lib$/;"	i
metalrec_lib	metalrec.py	/^import metalrec_lib$/;"	i
metalrec_lib	samread.py	/^import metalrec_lib$/;"	i
metalrec_lib	test.py	/^import metalrec_lib$/;"	i
metalrec_lib	tmp.py	/^import metalrec_lib$/;"	i
new_ref	tmp.py	/^new_ref = metalrec_lib.fill_gap(read_array, outFastaFile="\/Users\/cjg\/Work\/PacBio\/metalrec\/test\/good_reads.fasta", outDir=None, readinfo=readinfo, verbose=True)$/;"	v
os	align_tmp.py	/^import os$/;"	i
os	check_PBReads.py	/^import os$/;"	i
os	find_good_regions.py	/^import os$/;"	i
os	get_bbmap_time.py	/^import os$/;"	i
os	metalrec.py	/^import sys, os$/;"	i
os	metalrec_lib.py	/^import sys, os$/;"	i
pairwise	metalrec_lib.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
pairwise	samread.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
pairwise2	metalrec_lib.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
pairwise2	samread.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
pairwise2	tmp.py	/^from Bio import pairwise2$/;"	i
parser	align_tmp.py	/^parser = argparse.ArgumentParser(description="Align reads to corrected PacBio sequences at all correction steps.",$/;"	v
parser	check_PBReads.py	/^parser = argparse.ArgumentParser(description="Check the PacBio subreads and see if any of them has good regions",$/;"	v
parser	clean_sam.py	/^parser = argparse.ArgumentParser(description="parse sam file and get summary statistics",$/;"	v
parser	find_good_regions.py	/^parser = argparse.ArgumentParser(description="Find good regions of a PacBio read using mapping from short reads onto it",$/;"	v
parser	get_bbmap_time.py	/^parser = argparse.ArgumentParser(description="Get the bbmap running time for the mapping jobs.",$/;"	v
parser	metalrec.py	/^parser = argparse.ArgumentParser(description="Error correction of a PacBio read from alignment of Illumina reads to this PacBio read.",$/;"	v
parser	test.py	/^parser = argparse.ArgumentParser(description="parse sam file and get summary statistics",$/;"	v
pick_align	metalrec_lib.py	/^def pick_align(align_list):$/;"	f
prefix_chars	align_tmp.py	/^                                 prefix_chars='-', # prefix for options$/;"	v
prefix_chars	check_PBReads.py	/^                                 prefix_chars='-', # prefix for options$/;"	v
prefix_chars	clean_sam.py	/^                                 prefix_chars='-', # prefix for options$/;"	v
prefix_chars	find_good_regions.py	/^                                 prefix_chars='-', # prefix for options$/;"	v
prefix_chars	get_bbmap_time.py	/^                                 prefix_chars='-', # prefix for options$/;"	v
prefix_chars	metalrec.py	/^                                 prefix_chars='-', # prefix for options$/;"	v
prefix_chars	test.py	/^                                 prefix_chars='-', # prefix for options$/;"	v
print_seqs	metalrec_lib.py	/^def print_seqs(seq1, seq2, print_width = 100):$/;"	f
prog	align_tmp.py	/^                                 prog = 'align_tmp', #program name$/;"	v
prog	check_PBReads.py	/^                                 prog = 'check_PBreads', #program name$/;"	v
prog	clean_sam.py	/^                                 prog = 'testDrive', #program name$/;"	v
prog	find_good_regions.py	/^                                 prog = 'find_good_regions', #program name$/;"	v
prog	get_bbmap_time.py	/^                                 prog = 'check_PBreads', #program name$/;"	v
prog	metalrec.py	/^                                 prog = 'metalrec', #program name$/;"	v
prog	test.py	/^                                 prog = 'testDrive', #program name$/;"	v
programming	metalrec_lib.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
programming	samread.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
qseq	tmp.py	/^qseq = 'TGGGCGCGGGCGCAGCATGGGTGGCGGTCGCTACGGAAGGCACTACTAGCTACTAGCGGCGAGAGCGAGGGTAGGCGGGCGAGCTGGCAGGTTGGCGGGTACGCCGCGCCCGCCATTGCAATACGCTTGCCG'$/;"	v
r1	tmp.py	/^r1 = samread.SamRead(a) # SamRead object$/;"	v
rSeq_ext	unused.py	/^rSeq_ext = rSeq[left_one : rend ] # extend the mapped region to that position$/;"	v
re	align_tmp.py	/^import re$/;"	i
re	check_PBReads.py	/^import re$/;"	i
re	get_bbmap_time.py	/^import re$/;"	i
re	metalrec_lib.py	/^import re$/;"	i
re	samread.py	/^import re$/;"	i
re_align	samread.py	/^    def re_align(self, rseq):$/;"	m	class:SamRead
read_and_process_sam_samread	metalrec_lib.py	/^def read_and_process_sam_samread(samFile,rseq, maxSub=3, maxIns=3, maxDel=3,maxSubRate=0.02, maxInsRate=0.2, maxDelRate=0.2, minPacBioLen=1000, minCV=1,outsamFile='',outFastaFile='', verbose=False):$/;"	f
read_array1d	tmp.py	/^read_array1d = metalrec_lib.make_read_array1d(readinfo.keys()[0], bp_pos_dict, ins_pos_dict, type_array, poly_bps_ext, poly_ins_ext, consensus_bps_ext, consensus_ins_ext) $/;"	v
read_fasta	metalrec_lib.py	/^def read_fasta(fasta_file,trim=True,reverse=False):$/;"	f
read_sam	unused.py	/^def read_sam(samFile, maxSub=3, maxIns=3, maxDel=3,maxSubRate=0.02, maxInsRate=0.2, maxDelRate=0.2):$/;"	f
read_single_seq	metalrec_lib.py	/^def read_single_seq(fastaFile):$/;"	f
ref0	tmp.py	/^ref0 = metalrec_lib.get_consensus_from_array(read_array)$/;"	v
ref1	tmp.py	/^ref1 = metalrec_lib.get_new_ref(ref0, 10, read_array) # get a new ref$/;"	v
ref2	tmp.py	/^ref2 = metalrec_lib.get_new_ref(ref0, 319, read_array) # get a new ref$/;"	v
ref_consensus	unused.py	/^def ref_consensus(ref_bps, ref_ins_dict, rSeq):$/;"	f
ref_extension	metalrec_lib.py	/^def ref_extension(poly_bps, poly_ins, consensus_bps, consensus_ins, rseq, region=None, print_width = 100, verbose=False):$/;"	f
ref_fasta	tmp.py	/^ref_fasta = "\/Users\/cjg\/Work\/PacBio\/Results\/Wetlands\/subreads_with_good_regions\/m131016_052225_00123_c100575992550000001823095504021421_s1_p0__54538__13380_14430\/m131016_052225_00123_c100575992550000001823095504021421_s1_p0__54538__13380_14430.fasta"$/;"	v
ref_fasta	tmp.py	/^ref_fasta = "\/Users\/cjg\/Work\/PacBio\/metalrec\/test\/m130828_041445_00123_c100564312550000001823090912221381_s1_p0__54536__2157_4456.fasta"$/;"	v
ref_new	tmp.py	/^ref_new = metalrec_lib.fill_gap(read_array, "\/Users\/cjg\/Work\/PacBio\/metalrec\/test\/good_reads.fasta", "\/Users\/cjg\/Work\/PacBio\/metalrec\/test", readinfo, verbose=False)$/;"	v
revcompl	metalrec_lib.py	/^revcompl = lambda x: ''.join([{'A':'T','C':'G','G':'C','T':'A'}[B] for B in x][::-1]) # find reverse complement of a DNA sequence$/;"	v
revcompl	samread.py	/^revcompl = lambda x: ''.join([{'A':'T','C':'G','G':'C','T':'A'}[B] for B in x][::-1]) # find reverse complement of a DNA sequence$/;"	v
rseq	tmp.py	/^rseq = 'CCGTTCGGCGTCAAAGCCCACGCGCAGCTCTTCAGCGGTCCGCGTGGCGCGGGCGCAGCATGGGTGGCGGTCGCTACGGAAGGCACTACTAGCTACTAGCGGCGAGAGCGAGGGTAGGCGGGGCGAGCTGGCAGGTTGGCGGGTACGCGCGCCGCCATTGCAATACGCTTGCCGTCGCGGCGGGCCTTCGAGCGTGGCATG'$/;"	v
rseq	tmp.py	/^rseq = metalrec_lib.read_single_seq(ref_fasta)$/;"	v
samIn	tmp.py	/^samIn = open(samfile,'r')$/;"	v
samfile	tmp.py	/^samfile = "\/Users\/cjg\/Work\/PacBio\/Results\/Wetlands\/subreads_with_good_regions\/m131016_052225_00123_c100575992550000001823095504021421_s1_p0__54538__13380_14430\/a.sam"$/;"	v
samfile	tmp.py	/^samfile = "\/Users\/cjg\/Work\/PacBio\/metalrec\/test\/bbmap_red.sam"$/;"	v
samread	metalrec_lib.py	/^import samread$/;"	i
samread	tmp.py	/^import samread$/;"	i
shift_and_reduce	unused.py	/^def shift_and_reduce(align_list):$/;"	f
shift_ends	unused.py	/^def shift_ends(samFile, rSeq, samNew):$/;"	f
shift_to_left	metalrec_lib.py	/^def shift_to_left(align):$/;"	f
shutil	find_good_regions.py	/^import shutil$/;"	i
simplify_read_string	unused.py	/^def simplify_read_string(read_string):$/;"	f
sys	align_tmp.py	/^import sys$/;"	i
sys	check_PBReads.py	/^import sys$/;"	i
sys	clean_sam.py	/^import sys$/;"	i
sys	find_good_regions.py	/^import sys$/;"	i
sys	get_bbmap_time.py	/^import sys$/;"	i
sys	metalrec.py	/^import sys, os$/;"	i
sys	metalrec_lib.py	/^import sys, os$/;"	i
sys	samread.py	/^import sys$/;"	i
sys	test.py	/^import sys$/;"	i
time	align_tmp.py	/^import time$/;"	i
time	check_PBReads.py	/^import time$/;"	i
time	clean_sam.py	/^import time$/;"	i
time	get_bbmap_time.py	/^import time$/;"	i
trim_qseq	samread.py	/^    def trim_qseq(self):$/;"	m	class:SamRead
type_array	tmp.py	/^type_array = metalrec_lib.make_type_array(poly_bps_ext, poly_ins_ext, consensus_bps_ext, consensus_ins_ext)$/;"	v
update_pos_info	metalrec_lib.py	/^def update_pos_info(poly_bps, poly_ins, consensus_bps, consensus_ins, bp_pos_dict, ins_pos_dict):$/;"	f
using	metalrec_lib.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
using	samread.py	/^from Bio import pairwise2 # pairwise alignment using dynamic programming$/;"	i
write_compatible_reads	metalrec_lib.py	/^def write_compatible_reads(readsFasta, readinfo, compatible_ind, outDir):$/;"	f
