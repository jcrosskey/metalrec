/*
 * pickContig.cpp
 * Pick the most likely contig from sam file output by BLASR
 *
 * Created on: 01/05/2015 16:42:13
 * Author: JJ Chai
 */

/*** utility functions ***/
#include "Common.h"
/*** Read class ***/
#include "Read.h"
/*** Dataset class ***/
#include "Dataset.h"
int loglevel; // logging level in integer format, for different levels of verbosity

void usage();
void parseArguments(int argc, char **argv, string & inputSamFile, string & outputFastaName);

/************************
 * Help usage
 * **********************/
void usage()
{
	std::cout << std::endl
		<< "  Usage:" << std::endl
		<< "    pickContig [OPTION]...<PARAM>..." << std::endl
		<< std::endl
		<< "  <PARAM>" << std::endl
		<< "    -s\tinputSamFile" << std::endl  // Input sam file, generated by BLASR, with soft clipping
		<< std::endl
		<< "  [OPTION]" << std::endl
		<< "    -h/--help" << std::endl
		<< "    -o\tFasta files full path name with corrected sequence (default: inputSam.fasta)" << std::endl    // output directory
		<< "    -log\tSpecify log/output verbosity level, from ERROR, WARNING, INFO, DEBUG (default: INFO)" << std::endl 
		<< std::endl;
}

/**********************************************************************************************************************
  Parse the input arguments
 **********************************************************************************************************************/
void parseArguments(int argc, char **argv, string & inputSamFile, string & outputFastaName)
{
	inputSamFile = "";
	outputFastaName = "";
	FILELog::ReportingLevel();	// Initialize the log level to the default (INFO)
	vector<string> argumentsList;
	cout << endl;
	while(argc--)
		argumentsList.push_back(*argv++);

	if(argumentsList.size() == 1)
	{
		usage();
		exit(0);
	}

	for(UINT64 i = 1; i <= argumentsList.size()-1; i++)
	{
		if (argumentsList[i] == "-h" || argumentsList[i] == "--help")
		{
			usage();
			exit(0);
		}
		else if (argumentsList[i] == "-s")
			inputSamFile = argumentsList[++i];
		else if (argumentsList[i] == "-o")
			outputFastaName = argumentsList[++i];
		else if (argumentsList[i] == "-log"){
			try{
				FILELog::ReportingLevel() = FILELog::FromString(argumentsList[++i]);
			}
			catch(const std::exception& e)
			{
				FILE_LOG(logERROR) << e.what();
				FILELog::FromString("INFO");
			}
		}
		else
		{
			usage();
			exit(0);
		}
	}

	if(inputSamFile.size() == 0)
	{
		FILE_LOG(logERROR) << "missed input sam file!" << std::endl;
		usage();
		exit(0);
	}
	if (outputFastaName.size() == 0)
		outputFastaName = Utils::getFilename(inputSamFile) + ".fasta";

	FILE_LOG(logDEBUG) << "input sam file: " << inputSamFile;
	FILE_LOG(logDEBUG) << "output file name : " << outputFastaName;
}

/************************
 * main function
 * **********************/
int main(int argc, char **argv)
{
	CLOCKSTART;
	/** Parse command line arguments **/
	string inputSamFile, outputFastaName;
	parseArguments(argc, argv, inputSamFile, outputFastaName);
	loglevel = FILELog::ReportingLevel(); // logging level in integer
	FILE_LOG(logDEBUG1) << "Parsing argument list finished";

	/** Read sam file and store all the reads **/
	Dataset *contigs = new Dataset(inputSamFile, 1, 1.0, 1.0);	// now reads the .sam file, later should be able to take the string stream TODO**
	if (contigs->getNumberOfReads() == 0)
		FILE_LOG(logERROR) << "Data set " << "contigs.sam " << " has no read in it, quitting...";
	else
	{
		UINT64 mostLikelyID = contigs->findMostLikelyReadID(); /* find the most likely read/contig, for testing here */
		string s = contigs->getReadFromID(mostLikelyID)->getDnaStringForward();
		ofstream outputFilePointer; 
		outputFilePointer.open(outputFastaName.c_str());
		if(!outputFilePointer.is_open())
			MYEXIT("Unable to open file: "+ outputFastaName);
		outputFilePointer << ">" << Utils::getFilename(inputSamFile) << " " << contigs->getReadFromID(mostLikelyID)->getReadName() << " Length: " << s.length() << endl;
		UINT32 start=0;
		do
		{
			outputFilePointer << s.substr(start, 100) << endl;  // save 100 BP in each line.
			start+=100;
		} while (start < s.length());
		outputFilePointer.close();
	}
	delete contigs;

	CLOCKSTOP;
}
